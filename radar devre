
#<Servo.h> ekleyin. 

sabit int trigPin = 4;
const int echoPin = 3;


uzun süre;
int mesafesi;
Servo myServo;


geçersiz kurulum() {

  pinMode(trigPin, ÇIKIŞ);
  pinMode(echoPin, GİRİŞ); 
 Seri. başlangıç(9600);
 myServo. ekle(9); 

}


geçersiz döngü() {



  for(int i=15; i<=165; i++){ 
 myServo. yazmak(i);
  gecikmesi (30);
 mesafe = calculateDistance();

 Seri. baskı(i); 
 Seri. print(","); 
 Seri. yazdır (mesafe);
 Seri. print(".");
  }



  for(int i=165; I>15; i--){ 
 myServo. yazmak(i);
  gecikmesi (30);
 mesafe = calculateDistance();
 Seri. baskı(i);
 Seri. print(",");
 Seri. yazdır (mesafe);
 Seri. print(".");
  }
}



int calculateDistance(){ 

  digitalWrite(trigPin, DÜŞÜK); 
  gecikmeMikrosaniye(2);

  digitalWrite(trigPin, YÜKSEK); 
  gecikmeMikrosaniye(10);
  digitalWrite(trigPin, DÜŞÜK);
 süre = pulseIn(echoPin, YÜKSEK); 
 mesafe= süre*0.034/2;
  dönüş mesafesi;

}
 141 değişiklik: 141 ekleme ve 0 silme141  
Arduino_Radar/Radar.pde
@@ -0,0 +1,141 @@
import processing.serial.*; Seri haberleşme için kütüphaneyi içe aktarır
java.awt.event.KeyEvent'i içe aktarın; Seri porttan veri okumak için kütüphaneyi içe aktarır
java.io.IOException'ı içe aktar;
Seri myPort; Nesne Serisini tanımlar
Değişkenleri defubes
Dize açısı="";
Dize mesafesi="";
Dize verileri="";
Dize noObject;
float pixsMesafe;
int iAngle, iDistance;
int dizini1=0;
int dizini2=0;
PFont orcFont;
geçersiz kurulum() {

 boyut (1920, 1080);
 düz();
 myPort = yeni Seri(this,"/dev/tty.wchusbserial1410", 9600);  seri haberleşmeyi başlatır
 benim Port'um.bufferUntil('.'); Seri porttan '.' karakterine kadar olan verileri okur. Yani aslında şunu okuyor: açı, mesafe.
 orcFont = loadFont("PTSans-Kalınİtalik-48.vlw");
}
geçersiz çekiliş() {

  doldurmak(98,245,31);
  textFont(orcFont);
  Hareket bulanıklığını ve hareketli çizginin yavaş solmasını simüle etme
  inme yok();
  dolgu(0,4); 
  rekt(0, 0, genişlik, 1010); 

  dolgu(98,245,31); Yeşil renk
  radarı çizmek için fonksiyonları çağırır
  drawRadar(); 
  drawLine();
  drawObject();
  drawText();
}
void serialEvent (Serial myPort) { // Seri Porttan veri okumaya başlar
  Serial Port'tan '.' karakterine kadar olan veriyi okur ve "data" String değişkenine koyar.
 veri = myPort.readStringUntil('.');
 veri = veri.substring(0,veri.uzunluk ()-1);

 index1 = veri.indexOf(","); ',' karakterini bulun ve "index1" değişkenine koyun
 açı= veri.alt dize(0, dizin1); "0" konumundan index1 değişkeninin konumuna kadar olan verileri okuyun veya bu, Arduino Kartının Seri Porta gönderdiği açının değeridir.
 mesafe= veri.substring(index1+1, veri.uzunluk()); "index1" konumundan verinin sonuna kadar olan verileri okuyun pr bu mesafenin değeridir

  String değişkenlerini Integer'a dönüştürür
  iAngle = int(angle);
  iDistance = int(distance);
}
void drawRadar() {
  pushMatrix();
  translate(960,1000); // moves the starting coordinats to new location
  noFill();
  strokeWeight(2);
  stroke(98,245,31);
  // draws the arc lines
  arc(0,0,1800,1800,PI,TWO_PI);
  arc(0,0,1400,1400,PI,TWO_PI);
  arc(0,0,1000,1000,PI,TWO_PI);
  arc(0,0,600,600,PI,TWO_PI);
  // draws the angle lines
  line(-960,0,960,0);
  line(0,0,-960*cos(radians(30)),-960*sin(radians(30)));
  line(0,0,-960*cos(radians(60)),-960*sin(radians(60)));
  line(0,0,-960*cos(radians(90)),-960*sin(radians(90)));
  line(0,0,-960*cos(radians(120)),-960*sin(radians(120)));
  line(0,0,-960*cos(radians(150)),-960*sin(radians(150)));
  line(-960*cos(radians(30)),0,960,0);
  popMatrix();
}
void drawObject() {
  pushMatrix();
  translate(960,1000); // moves the starting coordinats to new location
  strokeWeight(9);
  stroke(255,10,10); // red color
  pixsDistance = iDistance*22.5; // covers the distance from the sensor from cm to pixels
  // limiting the range to 40 cms
  if(iDistance<40){
    // draws the object according to the angle and the distance
  line(pixsDistance*cos(radians(iAngle)),-pixsDistance*sin(radians(iAngle)),950*cos(radians(iAngle)),-950*sin(radians(iAngle)));
  }
  popMatrix();
}
void drawLine() {
  pushMatrix();
  strokeWeight(9);
  stroke(30,250,60);
  translate(960,1000); // moves the starting coordinats to new location
  line(0,0,950*cos(radians(iAngle)),-950*sin(radians(iAngle))); // draws the line according to the angle
  popMatrix();
}
void drawText() { // draws the texts on the screen

  pushMatrix();
  if(iDistance>40) {
  noObject = "Out of Range";
  }
  else {
  noObject = "In Range";
  }
  fill(0,0,0);
  noStroke();
  rect(0, 1010, width, 1080);
  fill(98,245,31);
  textSize(25);
  text("10cm",1180,990);
  text("20cm",1380,990);
  text("30cm",1580,990);
  text("40cm",1780,990);
  textSize(40);
  text("Object: " + noObject, 240, 1050);
  text("Angle: " + iAngle +" °", 1050, 1050);
  text("Distance: ", 1380, 1050);
  if(iDistance<40) {
  text("        " + iDistance +" cm", 1400, 1050);
  }
  textSize(25);
  fill(98,245,60);
  translate(961+960*cos(radians(30)),982-960*sin(radians(30)));
  rotate(-radians(-60));
  text("30°",0,0);
  resetMatrix();
  translate(954+960*cos(radians(60)),984-960*sin(radians(60)));
  döndür(-radyan(-30));
  metin("60°",0,0);
  sıfırlama matrisi();
  çevir(945+960*cos(radyan(90)),990-960*sin(radyan(90))));
  döndür(radyan(0));
  metin("90°",0,0);
  sıfırlama matrisi();
  çevir(935+960*cos(radyan(120)),1003-960*sin(radyan(120))));
  döndür (radyan (-30));
  metin("120°",0,0);
  sıfırlama matrisi();
  çevir(940+960*cos(radyan(150)),1018-960*sin(radyan(150))));
  döndür (radyan (-60));
  metin("150°",0,0);
  popMatrix (popMatrix)(); 
}
